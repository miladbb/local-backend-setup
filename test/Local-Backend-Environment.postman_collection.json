{
	"info": {
		"_postman_id": "e907859a-1c78-48bb-a382-c606aa952ddf",
		"name": "Local Backend Environment Test",
		"description": "Specs for Message Service API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17968734"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Token-converter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token Converter is ready\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"UP\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/token-converter/actuator/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"token-converter",
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Identity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Identity is ready\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"backbase\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{identityUrl}}/auth/realms/backbase/.well-known/openid-configuration",
							"host": [
								"{{identityUrl}}"
							],
							"path": [
								"auth",
								"realms",
								"backbase",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Control",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token Converter is ready\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"<status>UP</status>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{registeryUrl}}/eureka/apps/access-control",
							"host": [
								"{{registeryUrl}}"
							],
							"path": [
								"eureka",
								"apps",
								"access-control"
							]
						}
					},
					"response": []
				},
				{
					"name": "Arrangement Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token Converter is ready\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"<status>UP</status>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{registeryUrl}}/eureka/apps/arrangement-manager",
							"host": [
								"{{registeryUrl}}"
							],
							"path": [
								"eureka",
								"apps",
								"arrangement-manager"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token Converter is ready\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"<status>UP</status>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{registeryUrl}}/eureka/apps/user-manager",
							"host": [
								"{{registeryUrl}}"
							],
							"path": [
								"eureka",
								"apps",
								"user-manager"
							]
						}
					},
					"response": []
				},
				{
					"name": "Identity Integration Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token Converter is ready\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"<status>UP</status>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{registeryUrl}}/eureka/apps/identity-integration-service",
							"host": [
								"{{registeryUrl}}"
							],
							"path": [
								"eureka",
								"apps",
								"identity-integration-service"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function() {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"XSRF Token Cookie returned\", function () {",
							"    var cookie = postman.getResponseCookie(\"XSRF-TOKEN\");",
							"    pm.expect(cookie).to.be.not.null;",
							"    if (cookie && cookie.value) {",
							"        postman.setGlobalVariable(\"X-CSRF-TOKEN\", cookie.value);",
							"    }",
							"});",
							"",
							"//for auth read cookie",
							"var authCookie = postman.getResponseCookie(\"AuthToken\");",
							"if (authCookie && authCookie.value) {",
							"  postman.setGlobalVariable(\"authToken\", authCookie.value);",
							"}",
							"",
							"//for identity read json",
							"if (responseBody) {",
							"  var jsonData = JSON.parse(responseBody);",
							"  postman.setGlobalVariable(\"authToken\", jsonData.access_token);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//clear Auth and CSRF",
							"postman.setGlobalVariable(\"authToken\"); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "bb-tooling-client",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{identityUrl}}/auth/realms/backbase/protocol/openid-connect/token",
					"host": [
						"{{identityUrl}}"
					],
					"path": [
						"auth",
						"realms",
						"backbase",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Messages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function() {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/example-integration-service/client-api/v1/all-messages",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"example-integration-service",
						"client-api",
						"v1",
						"all-messages"
					]
				},
				"description": "Returns all available messages"
			},
			"response": [
				{
					"name": "No description available",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/client-api/v1/all-messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"client-api",
								"v1",
								"all-messages"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"value\": \"reference examples/body/example-messages-get.json not found in the given specification\"\n}"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/client-api/v1/all-messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"client-api",
								"v1",
								"all-messages"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/client-api/v1/all-messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"client-api",
								"v1",
								"all-messages"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8280",
			"type": "string"
		},
		{
			"key": "identityUrl",
			"value": "http://localhost:8180",
			"type": "string"
		},
		{
			"key": "registeryUrl",
			"value": "http://localhost:8761",
			"type": "string"
		}
	]
}